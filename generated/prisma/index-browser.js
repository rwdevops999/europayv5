
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  servicename: 'servicename'
};

exports.Prisma.ServiceActionScalarFieldEnum = {
  id: 'id',
  serviceactionname: 'serviceactionname'
};

exports.Prisma.ServiceStatementActionScalarFieldEnum = {
  id: 'id',
  ssactionname: 'ssactionname',
  createDate: 'createDate',
  updateDate: 'updateDate',
  statementid: 'statementid',
  serviceactionid: 'serviceactionid'
};

exports.Prisma.ServiceStatementScalarFieldEnum = {
  id: 'id',
  ssname: 'ssname',
  description: 'description',
  permission: 'permission',
  managed: 'managed',
  system: 'system',
  createDate: 'createDate',
  updateDate: 'updateDate',
  serviceid: 'serviceid'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  role: 'role',
  name: 'name',
  description: 'description',
  content: 'content',
  asHtml: 'asHtml',
  fromFile: 'fromFile',
  parameters: 'parameters',
  managed: 'managed'
};

exports.Prisma.PolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  managed: 'managed',
  system: 'system',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  type: 'type',
  subtype: 'subtype',
  key: 'key',
  value: 'value'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  managed: 'managed',
  system: 'system',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  dialCode: 'dialCode',
  code: 'code',
  currency: 'currency',
  currencycode: 'currencycode',
  symbol: 'symbol'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  number: 'number',
  box: 'box',
  city: 'city',
  postalcode: 'postalcode',
  createDate: 'createDate',
  updateDate: 'updateDate',
  county: 'county',
  countryId: 'countryId',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  lastname: 'lastname',
  firstname: 'firstname',
  avatar: 'avatar',
  phone: 'phone',
  email: 'email',
  password: 'password',
  passwordless: 'passwordless',
  attemps: 'attemps',
  blocked: 'blocked',
  managed: 'managed',
  system: 'system',
  loggedinDate: 'loggedinDate',
  type: 'type',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.UserPATScalarFieldEnum = {
  id: 'id',
  tokenName: 'tokenName',
  token: 'token',
  createDate: 'createDate',
  expirationDate: 'expirationDate',
  tokenStatus: 'tokenStatus',
  userId: 'userId'
};

exports.Prisma.UserSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  managed: 'managed',
  system: 'system',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.ExportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  status: 'status',
  userId: 'userId',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.AccountApplyScalarFieldEnum = {
  id: 'id',
  username: 'username',
  firstname: 'firstname',
  lastname: 'lastname',
  password: 'password',
  email: 'email',
  country: 'country',
  gender: 'gender',
  status: 'status',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  params: 'params',
  fromStatus: 'fromStatus',
  predecessorTaskId: 'predecessorTaskId',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.OTPScalarFieldEnum = {
  id: 'id',
  OTP: 'OTP',
  email: 'email',
  userId: 'userId',
  status: 'status',
  createDate: 'createDate',
  updateDate: 'updateDate',
  expirationDate: 'expirationDate'
};

exports.Prisma.HistoryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  originator: 'originator',
  createDate: 'createDate',
  updateDate: 'updateDate',
  type: 'type'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  jobname: 'jobname',
  status: 'status',
  description: 'description',
  model: 'model',
  data: 'data',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionid: 'transactionid',
  status: 'status',
  statusMessage: 'statusMessage',
  isBankTransaction: 'isBankTransaction',
  senderAmount: 'senderAmount',
  receiverAmount: 'receiverAmount',
  senderAccountAmount: 'senderAccountAmount',
  receiverAccountAmount: 'receiverAccountAmount',
  senderAccountId: 'senderAccountId',
  receiverAccountId: 'receiverAccountId',
  sender: 'sender',
  receiver: 'receiver',
  message: 'message',
  createDate: 'createDate',
  updateDate: 'updateDate'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  IBAN: 'IBAN',
  status: 'status',
  createDate: 'createDate',
  updateDate: 'updateDate',
  accountId: 'accountId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Permission = exports.$Enums.Permission = {
  ALLOW: 'ALLOW',
  DENY: 'DENY'
};

exports.TemplateRole = exports.$Enums.TemplateRole = {
  ALL: 'ALL',
  ALERT: 'ALERT',
  EMAIL: 'EMAIL',
  HISTORY: 'HISTORY',
  LOGIN: 'LOGIN',
  TASK: 'TASK',
  NOTIFICATION: 'NOTIFICATION'
};

exports.UserType = exports.$Enums.UserType = {
  EUROPAY: 'EUROPAY',
  GUEST: 'GUEST'
};

exports.TokenStatus = exports.$Enums.TokenStatus = {
  ACTIVE: 'ACTIVE',
  VOID: 'VOID'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  BLOCKED: 'BLOCKED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  COMPLETE: 'COMPLETE'
};

exports.AccountApplyStatus = exports.$Enums.AccountApplyStatus = {
  CREATED: 'CREATED',
  OPEN: 'OPEN',
  CLOSED: 'CLOSED'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  CREATED: 'CREATED',
  OPEN: 'OPEN',
  COMPLETE: 'COMPLETE'
};

exports.OTPStatus = exports.$Enums.OTPStatus = {
  ONGOING: 'ONGOING',
  USED: 'USED',
  EXPIRED: 'EXPIRED'
};

exports.HistoryType = exports.$Enums.HistoryType = {
  ALL: 'ALL',
  INFO: 'INFO',
  ACTION: 'ACTION'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  CREATED: 'CREATED',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  SUSPENDED: 'SUSPENDED'
};

exports.JobModel = exports.$Enums.JobModel = {
  CLIENT: 'CLIENT',
  SERVER: 'SERVER'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.IBANStatus = exports.$Enums.IBANStatus = {
  VALID: 'VALID',
  INVALID: 'INVALID'
};

exports.Prisma.ModelName = {
  Service: 'Service',
  ServiceAction: 'ServiceAction',
  ServiceStatementAction: 'ServiceStatementAction',
  ServiceStatement: 'ServiceStatement',
  Template: 'Template',
  Policy: 'Policy',
  Setting: 'Setting',
  Role: 'Role',
  Country: 'Country',
  Address: 'Address',
  User: 'User',
  UserPAT: 'UserPAT',
  UserSetting: 'UserSetting',
  Group: 'Group',
  Export: 'Export',
  Account: 'Account',
  AccountApply: 'AccountApply',
  Task: 'Task',
  OTP: 'OTP',
  History: 'History',
  Job: 'Job',
  Transaction: 'Transaction',
  BankAccount: 'BankAccount'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
